import torch
import torch.nn as nn
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
import os
import pandas as pd
from torch.utils.data import Dataset, DataLoader
from torchvision.io import read_image
from torchvision.models import resnet50, ResNet50_Weights
import numpy as np
import random
import cv2
import numpy as np
import pandas as pd
from skimage.measure import regionprops
from scipy.ndimage import gaussian_filter1d

def compute_geometric_features(image_path):
    try:
        img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
        _, binary = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)

        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
        if not contours:
            return [0]*7  # If no contour, return zeros

        contour = max(contours, key=cv2.contourArea)  # Use largest contour

        area = cv2.contourArea(contour)
        perimeter = cv2.arcLength(contour, True)

        # Eccentricity
        mask = np.zeros_like(binary)
        cv2.drawContours(mask, [contour], -1, 255, -1)
        props = regionprops(mask.astype(int))
        eccentricity = props[0].eccentricity if props else 0

        # Compactness
        compactness = area / (perimeter ** 2) if perimeter != 0 else 0

        # Curvature
        contour_array = contour[:, 0, :]
        dx = np.gradient(contour_array[:, 0])
        dy = np.gradient(contour_array[:, 1])
        ddx = np.gradient(dx)
        ddy = np.gradient(dy)
        curvature = np.abs((dx * ddy - dy * ddx) / (dx**2 + dy**2 + 1e-6)**1.5)
        avg_curvature = np.mean(gaussian_filter1d(curvature, sigma=2))

        # Contour Length
        contour_len = len(contour_array)

        # Height Difference
        height_diff = np.max(contour_array[:, 1]) - np.min(contour_array[:, 1])

        return [area, perimeter, eccentricity, compactness, avg_curvature, contour_len, height_diff]
    except Exception as e:
        print(f"Error processing {image_path}: {e}")
        return [0]*7

class ResNetFeatureExtractor(nn.Module):
    def __init__(self, output_dim=192, weights=ResNet50_Weights.DEFAULT):
        super().__init__()
        # Load pretrained ResNet-50
        base_model = models.resnet50(weights=weights)
        # Remove the classification head (keep up to avgpool)
        self.backbone = nn.Sequential(*list(base_model.children())[:-1])  # [B, 2048, 1, 1]
        self.pool = nn.AdaptiveAvgPool2d((1, 1))  # optional, usually already done
        self.flatten = nn.Flatten()  # [B, 2048]
        self.proj = nn.Linear(2048, output_dim)  # [B, output_dim]
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.backbone(x)
        x = self.pool(x)
        x = self.flatten(x)
        x = self.proj(x)
        return self.relu(x)  # final shape: [B, output_dim]

class PreprocessedImageDataset(Dataset):
    def __init__(self, dir1, dir2):
        self.image_paths = []
        for d in [dir1, dir2]:
            self.image_paths += [
                os.path.join(d, f)
                for f in os.listdir(d)
                if f.lower().endswith(('.png'))
            ]

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        image = Image.open(self.image_paths[idx]).convert('RGB')
        tensor = transforms.ToTensor()(image)
        path = self.image_paths[idx]

        if 'H_' in self.image_paths[idx]:
            label = torch.tensor(0)
        else: label = torch.tensor(1)

        return path, tensor, label
        
def set_seed(seed=42):
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)
    np.random.seed(seed)
    random.seed(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

set_seed()
# Load model
model = ResNetFeatureExtractor(output_dim=192)
model.eval()

# Load dataset
datasets = {
    # "train_resnet_mixup" : PreprocessedImageDataset("./preprocessed_data/image/train","./augmented_data/image/"),
    "train_resnet_geoaug" : PreprocessedImageDataset("./preprocessed_data/image/train","./augmented_data/image/geometric"),
    "test_resnet" : PreprocessedImageDataset("./preprocessed_data/image/test",None)
}



# Extract features
for key in datasets:
    dataloader = DataLoader(datasets[key], batch_size=32, num_workers=0)

    all_features = []
    all_labels = []
    with torch.no_grad():
        for paths, imgs, labels in dataloader:
            geo_feats = [compute_geometric_features(p) for p in paths]
            geo_feats_tensor = torch.tensor(geo_feats, dtype=torch.float32)  # shape [B, 7]
            cnn_feats = model(imgs) 

            # combined_feats = torch.cat([cnn_feats, geo_feats_tensor], dim=1)
            # all_features.append(combined_feats)
            all_features.append(cnn_feats)

            all_labels.append(labels)
            

    all_features = torch.cat(all_features, dim=0)  # [N, d_model]
    all_labels = torch.cat(all_labels, dim=0)      # [N]

    df = pd.DataFrame(all_features.cpu().numpy())
    labels_df = pd.DataFrame(all_labels.cpu().numpy())

    df.to_csv(f'./encoders/encoded/image/{key}_features.csv', index=False)
    labels_df.to_csv(f'./encoders/encoded/image/{key}_labels.csv', index=False)

